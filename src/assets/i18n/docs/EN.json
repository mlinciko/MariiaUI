{
  "header": {
    "menu": {
      "demos": "Demos",
      "docs": "Docs",
      "blog": "Blog"
    },
    "dropdownLabel": "Language",
    "themesLabel": "Theme"
  },
  "docs": {
    "menu": {
      "overview": "Overview",
      "gettingStarted": "Getting started",
      "translation": "Translation",
      "themes": "Themes",
      "styling": "Styling",
      "icons": "Icons",
      "dataTypes": "Data types",
      "dataBinding": "Data Binding",
      "uiComponents": "UI Components"
    },
    "dataBinding": {
      "title": "Data Binding",
      "description": "Our library offers the ability to use an API to retrieve data from components such as <a href=\"http://localhost:4200/docs/table\">Table</a>",
      "creatingSource": {
        "title": "Creating <b>MuiTableSource</b>",
        "description": "Create a new instance of the <a href=\"http://localhost:4200/docs/data-types\">MuiTableSource</a> class. As an argument, pass a link to the API that will work with the data for the table"
      },
      "definingApi": {
        "title": "API Definition",
        "description1": "The API that will work via the specified link must have a set of CRUD operations",
        "description2": "<b>GET</b> -> returns all elements of a set. May have parameters for pagination and sorting. For example:",
        "description3": "<b>POST</b> -> allows you to add a new element to the set. The body of the request contains an element with a string structure similar to that returned from GET",
        "description4": "<b>PATCH</b> -> allows you to update one element of the set. The body of the request contains an element with a structure similar to that returned from GET (not all fields of the structure can be received)",
        "description5": "<b>DELETE</b> -> allows you to remove an element from a set. Removal must occur based on the unique id of the element"
      },
      "template": {
        "title": "Table template",
        "description": "Add defined source to your table component"
      }
    },
    "gettingStarted": {
      "title": "Getting started",
      "description": "This section will guide you through the initial steps required to start using our library in your Angular applications",
      "creatingNewApp": {
        "title": "Creating a new Angular project",
        "description": "If you already have a project skip this part. Create a new Angular project using command:"
      },
      "installation": {
        "title": "Installation",
        "description1": "To install the library, you can use npm or yarn:",
        "description2": "or"
      },
      "importing": {
        "title": "Importing",
        "description": "Import the <b>MariiaUiModule</b> into your AppModule:"
      },
      "styles": {
        "title": "Styles",
        "description": "Import <b>themes.scss</b> file into your global style file:"
      },
      "using": {
        "title": "Using UI-components",
        "description": "Use the components in your templates:"
      }
    },
    "translation": {
      "title": "Translation",
      "description": "This section is dedicated to the ability to add translations for error texts/headings, etc. to the library",
      "setting": {
        "title": "Setting with translations",
        "description1": "First, download this file <a href=\"/assets/i18n/library/example-translation.json\" download> example-translation.json</a> and replace the default translations in it with the ones you need. For example:",
        "description2": "Replace it with:"
      },
      "params": {
        "title": "Params",
        "description1": "You can use params for translations. Set your params into ${}.For example:",
        "description2": "<b>max</b> will be replaced with value at this line"
      },
      "providers": {
        "title": "Adding providers",
        "description1": "Add created file to your project and then write this code into your <b>AppModule</b>:",
        "description2": "Now your application is using your translation file in UI components!"
      }
    },
    "themes": {
      "title": "Themes",
      "description": "This section describes the library's ability to select themes",
      "import": {
        "title": "Import styles",
        "description": "Import <b>themes.scss</b> file into your global style file:"
      },
      "providers": {
        "title": "Adding providers",
        "description1": "Add theme provider into <b>AppModule</b>:",
        "description2": "<b>ThemeConfig</b> has type:"
      },
      "custom": {
        "title": "Custom theme",
        "description": "You can also provide custom colors for UI components. Add this CSS code to your global styles file:"
      }
    },
    "styling": {
      "title": "Styling",
      "description": "This section is dedicated to the possibilities of customizing components by setting your own styles",
      "defineStyles": {
        "title": "Define styles",
        "description": "Write the styles that you want to set for the component and save them to a variable"
      },
      "directive": {
        "title": "Applying directive",
        "description1": "Apply the directive <b>muiStyles</b> to the component whose styles you want to change. Pass defined styles to the directive",
        "description2": "Now the component uses your custom styles. For example:"
      }
    },
    "overview": {
      "title": "Overview",
      "description": "Welcome to the official documentation of our Angular UI Components Library - MariiaUI! This library provides a robust, customizable set of UI components designed to facilitate the rapid development of modern, responsive, and accessible web applications using Angular",
      "keyFeatures": {
        "title": "Key Features",
        "description": "<p><b>Pre-built Components:</b>A comprehensive suite of components including buttons, dialogs, tabs, accordions, and more to enhance your application's UI.</p><p><b>High Customizability:</b>Style and behavior of components can be easily customized to fit the branding and functionality needs of your applications.</p><p><b>Ready to use:</b>All components are ready to use out of the box; they do not require additional configuration, unless you yourself want to change their behavior.</p><p><b>Responsive Design:</b>Built to work across various devices and screen sizes using responsive design principles.</p>"
      },
      "feedback": {
        "title": "Feedback and Support",
        "description": "<p>We value your feedback! If you have any questions, suggestions, or issues regarding our Angular UI Components Library, please don't hesitate to reach out to us. Check out our community <a href=\"https://github.com/mlinciko/MariiaUI/issues\">GitHub issues</a></p><p>Thank you for choosing our Angular UI Components Library! We hope you find it helpful and enjoy building amazing Angular applications with it.</p>"
      },
      "contribution": {
        "title": "Contribution",
        "description": "<p>Contributions to our library are always welcome! Whether it's improving documentation, adding new features, or fixing bugs, we appreciate all contributions that help make this library better.</p><p>We hope this overview helps you get started with our library. Dive deeper into specific components and advanced usage in other sections of this documentation. Enjoy building your next project with our tools at your disposal!</p>"
      }
    },
    "icons": {
      "title": "Icons",
      "description": "Icons are visual elements that can be used to complement a user interface",
      "inputs": {
        "color": "Property allows to set color of icon",
        "width": "Property allows to set width of icon",
        "height": "Property allows to set height of icon"
      }
    },
    "docPage": {
      "viewDemo": "View Demo",
      "properties": "Properties",
      "type": "Type",
      "returnType": "Return type",
      "defaultValue": "Default value",
      "description": "Description",
      "noInputs": "Component doesn't have any inputs",
      "noOutputs": "Component doesn't have any outputs"
    },
    "dataTypes": {
      "title": "Data types",
      "description": "This section describes the data types that are used in libraries"
    },
    "accordion": {
      "description": "UI component that allows to view the contents of subsections or categories in the interface, with the ability to expand and collapse each section as needed",
      "label": "Property allows to set a title for the entire component",
      "onItemVisibilityChange": "Property emits an event when a component element changes its visibility. Returns the label of the element that changed visibility"
    },
    "accordionItem": {
      "description": "UI component that is part of the Accordion component. Represents one element of the parent component",
      "label": "Property allows to set a label for one element of the Accordion component",
      "isExpanded": "Property allows to specify whether an element is expanded by default or not",
      "onChange": "Property emits an event when the element's title is clicked"
    },
    "barChart": {
      "description": "UI component that allows to display data in the form of bars, where each bar represents a different category or variable, and the height of the bar is proportional to the value of that category",
      "label": "Property allows to set a label for the chart",
      "barColor": "Property allows to set a color of the bars for the chart",
      "series": "Property allows to set data for the chart",
      "showGrid": "Property allows to enable grid for the chart",
      "width": "Property allows to set width of the chart",
      "height": "Property allows to set height of the chart",
      "onBarMouseover": "Property emits a new value when the mouse hovers over a chart column",
      "onBarMouseout": "Property emits a new value when the mouse cursor moves away from a chart column"
    },
    "button": {
      "description": "UI component that allows to confirm an action",
      "label": "Property allows to set a title for the button",
      "type": "Property allows to set type for the button from enum",
      "disabled": "Property allows to set disabled state for the button",
      "onClick": "Property emits an event when the button is clicked"
    },
    "checkbox": {
      "description": "UI component that allows to select one or more options from a given list",
      "label": "Property allows to set a title for the checkbox component",
      "disabled": "Property allows to set disabled state for the checkbox component",
      "readOnly": "Property allows to set readOnly state for the checkbox component",
      "visible": "Property allows to set visiblity state for the checkbox component",
      "formControl": "Property allows to set native angular form control to checkbox component",
      "onChange": "Property emits an event when the checkbox component gets new value"
    },
    "datePicker": {
      "description": "UI components that allows the user to select a date from the calendar. The component has calendar navigation",
      "label": "Property allows to set a title for the date-picker component",
      "disabled": "Property allows to set disabled state for the date-picker component",
      "placeholder": "Property allows to set placeholder for the date-picker component",
      "readOnly": "Property allows to set readOnly state for the date-picker component",
      "showClearButton": "Property allows to set show clear button state for the date-picker component",
      "visible": "Property allows to set visiblity state for the date-picker component",
      "dateMask": "Property allows to set date mask state for the date-picker component",
      "formControl": "Property allows to set native angular form control to date-picker component",
      "onChange": "Property emits an event when the date-picker component gets new value",
      "onClick": "Property emits an event when the date-picker component is clicked",
      "onCalendarVisibilityChanged": "Property emits an event when the date-picker component calender's visibility state changes"
    },
    "dropdown": {
      "description": "UI component allows the user to select one option from a predefined list that appears when clicking on a field",
      "options": "Property allows to set options for the dropdown component",
      "label": "Property allows to set a title for the dropdown component",
      "disabled": "Property allows to set disabled state for the dropdown component",
      "placeholder": "Property allows to set placeholder for the dropdown component",
      "readOnly": "Property allows to set readOnly state for the dropdown component",
      "showClearButton": "Property allows to set show clear button state for the dropdown component",
      "visible": "Property allows to set visiblity state for the dropdown component",
      "formControl": "Property allows to set native angular form control to dropdown component",
      "onSelectionChange": "Property emits an event when the dropdown component gets new value",
      "onOptionsVisibilityChange": "Property emits an event when the dropdown component options visibility state changes"
    },
    "filePicker": {
      "description": "UI component allows the user to select files from their local device",
      "label": "Property allows to set a title for the file-picker component",
      "buttonLabel": "Property allows to set a title for button of the file-picker component",
      "allowedTypes": "Property allows to set allowed file types for the file-picker component",
      "showClearButton": "Property allows to enable clear button for the file-picker component",
      "disabled": "Property allows to set disabled state for the file-picker component",
      "placeholder": "Property allows to set placeholder for the file-picker component",
      "readOnly": "Property allows to set readOnly state for the file-picker component",
      "visible": "Property allows to set visiblity state for the file-picker component",
      "formControl": "Property allows to set native angular form control to file-picker component",
      "onFileSelected": "Property emits an event when the file-picker component gets new value",
      "onFileDeleted": "Property emits an event when the file is deleted from the file-picker component"
    },
    "input": {
      "description": "UI component allows the user to enter text using standard input sources",
      "label": "Property allows to set a title for the input component",
      "disabled": "Property allows to set disabled state for the input component",
      "placeholder": "Property allows to set placeholder for the input component",
      "readOnly": "Property allows to set readOnly state for the input component",
      "showClearButton": "Property allows to set show clear button state for the input component",
      "visible": "Property allows to set visibility state for the input component",
      "formControl": "Property allows to set native angular form control to input component",
      "onInput": "Property emits an event when the input component gets new symbol",
      "onChange": "Property emits an event when the input component gets new value",
      "onFocus": "Property emits an event when the input component gets focus",
      "onBlur": "Property emits an event when the input component loses focus",
      "onKeydown": "Property emits an event when any key is down in the input component",
      "onKeyup": "Property emits an event when any key is up in the input component",
      "onKeypress": "Property emits an event when any key is pressed in the input component",
      "onMousedown": "Property emits an event when mouse key is down in the input component",
      "onMouseup": "Property emits an event when mouse key is up in the input component",
      "onClick": "Property emits an event when the input component is clicked"
    },
    "lineChart": {
      "description": "UI component is a graphical display of data in the form of a line that connects data points on a graph. Each data point represents the value of a variable in a specific coordinate system",
      "label": "Property allows to set a label for the chart",
      "colors": "Property allows to set colors of the lines of the chart",
      "series": "Property allows to set data for the chart",
      "showGrid": "Property allows to enable grid for the chart",
      "width": "Property allows to set width of the chart",
      "height": "Property allows to set height of the chart",
      "onPointMouseover": "Property emits a new value when the mouse hovers over a chart point",
      "onPointMouseout": "Property emits a new value when the mouse cursor moves away from a chart point"
    },
    "list": {
      "description": "UI component represents an element that is used to display an ordered set of elements as a vertical list. Component can be numbered or unnumbered",
      "label": "Property allows to set a label for the list",
      "items": "Property allows to set data for the list",
      "isNumbered": "Property allows to enable numbered list",
      "accessor": "Property allows to set accessor function for list data"
    },
    "lookup": {
      "description": "UI component allows the user to search for and select specific items from a predefined list",
      "options": "Property allows to set options for the lookup component",
      "label": "Property allows to set a label for the lookup component",
      "disabled": "Property allows to set disabled state for the lookup component",
      "placeholder": "Property allows to set placeholder for the lookup component",
      "readOnly": "Property allows to set readOnly state for the lookup component",
      "showClearButton": "Property allows to set show clear button state for the lookup component",
      "visible": "Property allows to set visibility state for the lookup component",
      "formControl": "Property allows to set native angular form control to lookup component",
      "onSelectionChange": "Property emits an event when the lookup component gets new value",
      "onSearchChange": "Property emits an event when the lookup component gets new value in search field",
      "onOptionsVisibilityChange": "Property emits an event when the lookup component options visibility state changes"
    },
    "notification": {
      "description": "UI component that informs user about different actions and events",
      "message": "Property allows to set message for the notification component",
      "duration": "Property allows to set a duration time in milliseconds for the notification component",
      "type": "Property allows to set type for the notification component"
    },
    "numberbox": {
      "description": "UI component allows to enter numbers using standard input sources",
      "label": "Property allows to set a title for the numberbox component",
      "disabled": "Property allows to set disabled state for the numberbox component",
      "placeholder": "Property allows to set placeholder for the numberbox component",
      "readOnly": "Property allows to set readOnly state for the numberbox component",
      "showClearButton": "Property allows to set show clear button state for the numberbox component",
      "visible": "Property allows to set visibility state for the numberbox component",
      "formControl": "Property allows to set native angular form control to numberbox component",
      "onInput": "Property emits an event when the numberbox component gets new input",
      "onChange": "Property emits an event when the numberbox component value changes",
      "onFocus": "Property emits an event when the numberbox component gains focus",
      "onBlur": "Property emits an event when the numberbox component loses focus",
      "onKeydown": "Property emits an event when any key is pressed down in the numberbox component",
      "onKeyup": "Property emits an event when any key is released in the numberbox component",
      "onKeypress": "Property emits an event when a keypress occurs in the numberbox component",
      "onMousedown": "Property emits an event when a mouse button is pressed down on the numberbox component",
      "onMouseup": "Property emits an event when a mouse button is released over the numberbox component",
      "onClick": "Property emits an event when the numberbox component is clicked"
    },
    "pieChart": {
      "description": "UI component is a graphical display of data in the form of a pie chart, where each category of data is represented by a sector of the circle",
      "label": "Property allows to set a label for the chart",
      "colors": "Property allows to set colors for the sectors of the chart",
      "series": "Property allows to set data for the chart",
      "width": "Property allows to set width of the chart",
      "height": "Property allows to set height of the chart",
      "onSectorMouseover": "Property emits an event when the mouse hovers over a chart sector",
      "onSectorMouseout": "Property emits an event when the mouse cursor moves away from a chart sector"
    },
    "popup": {
      "description": "UI component is a small pop-up window that appears on top of the main interface content. Component can have confirmation/cancel buttons",
      "title": "Property allows to set a header title for the popup",
      "buttons": "Property allows to set buttons for the popup component",
      "showCloseBtn": "Property allows to enable close button for the popup component",
      "visible": "Property allows to enable visibility status for the popup component",
      "width": "Property allows to set width in pixels of the popup component",
      "height": "Property allows to set height in pixels of the popup component",
      "top": "Property allows to set top in percent of the popup component",
      "left": "Property allows to set left in percent of the popup component",
      "onPopupClose": "Property emits an event when the popup component's close button is clicked",
      "visibleChange": "Property emits an event when the visible input of the component changes"
    },
    "radioButton": {
      "description": "UI component is a part of radio-group component",
      "label": "Property allows to set a label for the radio-button component",
      "isChecked": "Property allows to set checked state for the radio-button component",
      "onChange": "Property emits an event when radio-button checked status changes"
    },
    "radioGroup": {
      "description": "UI component allows to select one of the predefined options",
      "label": "Property allows to set a label for the radio-group component",
      "disabled": "Property allows to set disabled state for the radio-group component",
      "readOnly": "Property allows to set readOnly state for the radio-group component",
      "visible": "Property allows to set visibility state for the radio-group component",
      "onChange": "Property emits a new value when radio-group selected element changes"
    },
    "scrollLayout": {
      "description": "UI component represents an element that provides the ability to scroll content that does not fit entirely on the screen",
      "width": "Property allows to set width for the scroll-layout component",
      "height": "Property allows to set height for the scroll-layout component",
      "direction": "Property allows to set the direction of scroll for the scroll-layout component"
    },
    "slideToggle": {
      "description": "UI component that allows to choose between two states",
      "label": "Property allows to set a title for the slide-toggle component",
      "disabled": "Property allows to set disabled state for the slide-toggle component",
      "readOnly": "Property allows to set readOnly state for the slide-toggle component",
      "visible": "Property allows to set visibility state for the slide-toggle component",
      "formControl": "Property allows to set native angular form control to slide-toggle component",
      "onChange": "Property emits an event when the slide-toggle component value changes"
    },
    "slider": {
      "description": "UI components represents an element that allows the user to view a series of images by switching them forward or backward",
      "showDots": "Property allows to set navigation dots for the slider component",
      "width": "Property allows to set width for the slider component",
      "slideWidth": "Property allows to set width of the slide for the slider component",
      "gap": "Property allows to set the width of the gap between slide items for the slider component",
      "onSlideActiveChange": "Property emits an event when the active slide item changes. Returns index of active slide item"
    },
    "sliderItem": {
      "description": "UI component is a part of slider component",
      "isActive": "Property allows to set active state for the slider-item component"
    },
    "spinner": {
      "description": "UI component allows you to inform the user about loading data/page, etc.",
      "visible": "Property allows to set visibility state for the spinner component",
      "color": "Property allows to set color for the spinner component",
      "width": "Property allows to set width for the spinner component",
      "height": "Property allows to set height for the spinner component",
      "mode": "Property allows to set mode for the spinner component"
    },
    "tab": {
      "description": "UI component is a part of tabs component",
      "label": "Property allows to set a label for the tab component",
      "isActive": "Property allows to set active state for the tab component",
      "id": "Property allows to set an ID for the tab component"
    },
    "table": {
      "description": "UI component represents an element that is used to display data in the form of a table with rows and columns. It can have filtering, data sorting, and pagination (switching between table pages)",
      "data": "Property allows to set data for the table component",
      "columns": "Property allows to set columns for the table component",
      "addingEnabled": "Property allows to enable adding for the table component",
      "editingEnabled": "Property allows to enable editing for the table component",
      "deletingEnabled": "Property allows to enable deleting for the table component",
      "sortingEnabled": "Property allows to enable sorting for the table component",
      "filteringEnabled": "Property allows to enable filtering for the table component",
      "paginationEnabled": "Property allows to enable pagination for the table component",
      "pageSizes": "Property allows to set page sizes for pagination for the table component",
      "width": "Property allows to set width for the table component",
      "height": "Property allows to set height for the table component",
      "onRowAdded": "Property emits an event when a new row is added to the table component",
      "onRowSaved": "Property emits an event when a row is saved in the table component",
      "onRowEdited": "Property emits an event when a row is edited in the table component",
      "onRowDeleted": "Property emits an event when a row is deleted from the table component",
      "onFilterChange": "Property emits an event when filtering changes in the table component",
      "onSortingChange": "Property emits an event when sorting changes in the table component",
      "onPaginationChange": "Property emits an event when pagination changes in the table component"
    },
    "tabs": {
      "description": "UI component represents an element that organizes content across multiple tabs. Each tab contains separate content and the user can switch between them by selecting the desired tab",
      "onSelectionChange": "Property emits an event when the active tab changes in the tabs component"
    },
    "textarea": {
      "description": "UI component is text field for entering data in several lines. Allows the user to enter text using standard input sources. Has a counter of entered characters",
      "label": "Property allows to set a title for the textarea component",
      "disabled": "Property allows to set disabled state for the textarea component",
      "placeholder": "Property allows to set placeholder for the textarea component",
      "readOnly": "Property allows to set readOnly state for the textarea component",
      "showClearButton": "Property allows to set show clear button state for the textarea component",
      "visible": "Property allows to set visibility state for the textarea component",
      "height": "Property allows to set height for the textarea component",
      "maxLength": "Property allows to set max text length for the textarea component",
      "showCounter": "Property allows to enable symbol counter for the textarea component",
      "formControl": "Property allows to set native angular form control to textarea component",
      "onInput": "Property emits an event when the textarea component receives new input",
      "onChange": "Property emits an event when the value of the textarea component changes",
      "onFocus": "Property emits an event when the textarea component gains focus",
      "onBlur": "Property emits an event when the textarea component loses focus",
      "onKeydown": "Property emits an event when a key is pressed down in the textarea component",
      "onKeyup": "Property emits an event when a key is released in the textarea component",
      "onKeypress": "Property emits an event when a key is pressed in the textarea component",
      "onMousedown": "Property emits an event when the mouse button is pressed down on the textarea component",
      "onMouseup": "Property emits an event when the mouse button is released on the textarea component",
      "onClick": "Property emits an event when the textarea component is clicked"
    },
    "tooltip": {
      "description": "UI component allows you to show the user additional information about an element when hovering over it",
      "tooltipText": "Property allows to set a tooltip text for the tooltip component"
    }
  }
}